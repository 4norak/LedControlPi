/*
 *    LedControl.h - A library for controling Leds with a MAX7219/MAX7221
 *    Copyright (c) 2007 Eberhard Fahle, modified and adapted to run on a Raspberry Pi by Anorak
 * 
 *    Permission is hereby granted, free of charge, to any person
 *    obtaining a copy of this software and associated documentation
 *    files (the "Software"), to deal in the Software without
 *    restriction, including without limitation the rights to use,
 *    copy, modify, merge, publish, distribute, sublicense, and/or sell
 *    copies of the Software, and to permit persons to whom the
 *    Software is furnished to do so, subject to the following
 *    conditions:
 * 
 *    This permission notice shall be included in all copies or 
 *    substantial portions of the Software.
 * 
 *    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *    OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef LedControl_h
#define LedControl_h

#include <wiringPi.h>

typedef char byte;

//the opcodes for the MAX7221 and MAX7219
#define OP_NOOP   0
#define OP_DECODEMODE  9
#define OP_INTENSITY   10
#define OP_SCANLIMIT   11
#define OP_SHUTDOWN    12
#define OP_DISPLAYTEST 15

#define MAX_DEVICES 24

constexpr byte digits[][8] = {{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // ' '
                              {0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x00}, // '!'
                              {0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // '"'
                              {0x50, 0x50, 0xf8, 0x50, 0xf8, 0x50, 0x50, 0x00}, // '#'
                              {0x20, 0x78, 0xa0, 0x70, 0x28, 0xf0, 0x20, 0x00}, // '$'
                              {0xc0, 0xc8, 0x10, 0x20, 0x40, 0x98, 0x18, 0x00}, // '%'
                              {0x60, 0x90, 0xa0, 0x40, 0xa8, 0x90, 0x68, 0x00}, // '&'
                              {0x60, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00}, // '''
                              {0x10, 0x20, 0x40, 0x40, 0x40, 0x20, 0x10, 0x00}, // '('
                              {0x40, 0x20, 0x10, 0x10, 0x10, 0x20, 0x40, 0x00}, // ')'
                              {0x00, 0x20, 0xa8, 0x70, 0xa8, 0x20, 0x00, 0x00}, // '*'
                              {0x00, 0x20, 0x20, 0xf8, 0x20, 0x20, 0x00, 0x00}, // '+'
                              {0x00, 0x00, 0x00, 0x00, 0x60, 0x20, 0x40, 0x00}, // ','
                              {0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00}, // '-'
                              {0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x00}, // '.'
                              {0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00}, // '/'
                              {0x70, 0x88, 0x98, 0xa8, 0xc8, 0x88, 0x70, 0x00}, // '0'
                              {0x20, 0x60, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00}, // '1'
                              {0x70, 0x88, 0x08, 0x10, 0x20, 0x40, 0xf8, 0x00}, // '2'
                              {0xf8, 0x10, 0x20, 0x10, 0x08, 0x88, 0x70, 0x00}, // '3'
                              {0x10, 0x30, 0x50, 0x90, 0xf8, 0x10, 0x10, 0x00}, // '4'
                              {0xf8, 0x80, 0xf0, 0x08, 0x08, 0x88, 0x70, 0x00}, // '5'
                              {0x30, 0x40, 0x80, 0xf0, 0x88, 0x88, 0x70, 0x00}, // '6'
                              {0xf8, 0x08, 0x10, 0x20, 0x40, 0x40, 0x40, 0x00}, // '7'
                              {0x70, 0x88, 0x88, 0x70, 0x88, 0x88, 0x70, 0x00}, // '8'
                              {0x70, 0x88, 0x88, 0x78, 0x08, 0x10, 0x60, 0x00}, // '9'
                              {0x00, 0x60, 0x60, 0x00, 0x60, 0x60, 0x00, 0x00}, // ':'
                              {0x00, 0x60, 0x60, 0x00, 0x60, 0x20, 0x40, 0x00}, // ';'
                              {0x10, 0x20, 0x40, 0x80, 0x40, 0x20, 0x10, 0x00}, // '<'
                              {0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00}, // '='
                              {0x40, 0x20, 0x10, 0x08, 0x10, 0x20, 0x40, 0x00}, // '>'
                              {0x70, 0x88, 0x08, 0x10, 0x20, 0x00, 0x20, 0x00}, // '?'
                              {0x70, 0x88, 0x08, 0x68, 0xa8, 0xa8, 0x70, 0x00}, // '@'
                              {0x70, 0x88, 0x88, 0x88, 0xf8, 0x88, 0x88, 0x00}, // 'A'
                              {0xf0, 0x88, 0x88, 0xf0, 0x88, 0x88, 0xf0, 0x00}, // 'B'
                              {0x70, 0x88, 0x80, 0x80, 0x80, 0x88, 0x70, 0x00}, // 'C'
                              {0xe0, 0x90, 0x88, 0x88, 0x88, 0x90, 0xe0, 0x00}, // 'D'
                              {0xf8, 0x80, 0x80, 0xf0, 0x80, 0x80, 0xf8, 0x00}, // 'E'
                              {0xf8, 0x80, 0x80, 0xf0, 0x80, 0x80, 0x80, 0x00}, // 'F'
                              {0x70, 0x88, 0x80, 0xb8, 0x88, 0x88, 0x78, 0x00}, // 'G'
                              {0x88, 0x88, 0x88, 0xf8, 0x88, 0x88, 0x88, 0x00}, // 'H'
                              {0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00}, // 'I'
                              {0x38, 0x10, 0x10, 0x10, 0x10, 0x90, 0x60, 0x00}, // 'J'
                              {0x88, 0x90, 0xa0, 0xc0, 0xa0, 0x90, 0x88, 0x00}, // 'K'
                              {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xf8, 0x00}, // 'L'
                              {0x88, 0xd8, 0xa8, 0xa8, 0x88, 0x88, 0x88, 0x00}, // 'M'
                              {0x88, 0x88, 0xc8, 0xa8, 0x98, 0x88, 0x88, 0x00}, // 'N'
                              {0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00}, // 'O'
                              {0xf0, 0x88, 0x88, 0xf0, 0x80, 0x80, 0x80, 0x00}, // 'P'
                              {0x70, 0x88, 0x88, 0x88, 0xa8, 0x90, 0x68, 0x00}, // 'Q'
                              {0xf0, 0x88, 0x88, 0xf0, 0xa0, 0x90, 0x88, 0x00}, // 'R'
                              {0x78, 0x80, 0x80, 0x70, 0x08, 0x08, 0xf0, 0x00}, // 'S'
                              {0xf8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00}, // 'T'
                              {0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00}, // 'U'
                              {0x88, 0x88, 0x88, 0x88, 0x88, 0x50, 0x20, 0x00}, // 'V'
                              {0x88, 0x88, 0x88, 0xa8, 0xa8, 0xa8, 0x50, 0x00}, // 'W'
                              {0x88, 0x88, 0x50, 0x20, 0x50, 0x88, 0x88, 0x00}, // 'X'
                              {0x88, 0x88, 0x88, 0x50, 0x20, 0x20, 0x20, 0x00}, // 'Y'
                              {0xf8, 0x08, 0x10, 0x20, 0x40, 0x80, 0xf8, 0x00}, // 'Z'
                              {0x70, 0x40, 0x40, 0x40, 0x40, 0x40, 0x70, 0x00}, // '['
                              {0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x00, 0x00}, // '\'
                              {0x70, 0x10, 0x10, 0x10, 0x10, 0x10, 0x70, 0x00}, // ']'
                              {0x20, 0x50, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00}, // '^'
                              {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00}, // '_'
                              {0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00}, // '`'
                              {0x00, 0x00, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00}, // 'a'
                              {0x80, 0x80, 0xb0, 0xc8, 0x88, 0x88, 0xf0, 0x00}, // 'b'
                              {0x00, 0x00, 0x70, 0x80, 0x80, 0x88, 0x70, 0x00}, // 'c'
                              {0x08, 0x08, 0x68, 0x98, 0x88, 0x88, 0x78, 0x00}, // 'd'
                              {0x00, 0x00, 0x70, 0x88, 0xf8, 0x80, 0x70, 0x00}, // 'e'
                              {0x30, 0x48, 0x40, 0xe0, 0x40, 0x40, 0x40, 0x00}, // 'f'
                              {0x00, 0x78, 0x88, 0x88, 0x78, 0x08, 0x70, 0x00}, // 'g'
                              {0x80, 0x80, 0xb0, 0xc8, 0x88, 0x88, 0x88, 0x00}, // 'h'
                              {0x20, 0x00, 0x60, 0x20, 0x20, 0x20, 0x70, 0x00}, // 'i'
                              {0x10, 0x00, 0x30, 0x10, 0x10, 0x90, 0x60, 0x00}, // 'j'
                              {0x80, 0x80, 0x90, 0xa0, 0xc0, 0xa0, 0x90, 0x00}, // 'k'
                              {0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00}, // 'l'
                              {0x00, 0x00, 0xd0, 0xa8, 0xa8, 0x88, 0x88, 0x00}, // 'm'
                              {0x00, 0x00, 0xb0, 0xc8, 0x88, 0x88, 0x88, 0x00}, // 'n'
                              {0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00}, // 'o'
                              {0x00, 0x00, 0xf0, 0x88, 0xf0, 0x80, 0x80, 0x00}, // 'p'
                              {0x00, 0x00, 0x68, 0x98, 0x78, 0x08, 0x08, 0x00}, // 'q'
                              {0x00, 0x00, 0xb0, 0xc8, 0x80, 0x80, 0x80, 0x00}, // 'r'
                              {0x00, 0x00, 0x70, 0x80, 0x70, 0x08, 0xf0, 0x00}, // 's'
                              {0x40, 0x40, 0xe0, 0x40, 0x40, 0x48, 0x30, 0x00}, // 't'
                              {0x00, 0x00, 0x88, 0x88, 0x88, 0x98, 0x68, 0x00}, // 'u'
                              {0x00, 0x00, 0x88, 0x88, 0x88, 0x50, 0x20, 0x00}, // 'v'
                              {0x00, 0x00, 0x88, 0x88, 0xa8, 0xa8, 0x50, 0x00}, // 'w'
                              {0x00, 0x00, 0x88, 0x50, 0x20, 0x50, 0x88, 0x00}, // 'x'
                              {0x00, 0x00, 0x88, 0x88, 0x78, 0x08, 0x70, 0x00}, // 'y'
                              {0x00, 0x00, 0xf8, 0x10, 0x20, 0x40, 0xf8, 0x00}, // 'z'
                              {0x10, 0x20, 0x20, 0x40, 0x20, 0x20, 0x10, 0x00}, // '{'
                              {0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00}, // '|'
                              {0x40, 0x20, 0x20, 0x10, 0x20, 0x20, 0x40, 0x00}, // '}'
                              {0x00, 0x00, 0x00, 0x68, 0x90, 0x00, 0x00, 0x00}} // '~'
                              
class LedControl {
    private :
        /* The array for shifting the data to the devices */
        byte spidata[MAX_DEVICES * 2];
        /* Send out a single command to the device */
        void spiTransfer(const int addr, volatile const byte opcode, volatile byte data);
        /* Replacement for the Arduino-function */
        void shiftOut(byte data);

        /* We keep track of the led-status for all 8 devices in this array */
        byte status[MAX_DEVICES * 8];
        /* Data is shifted out of this pin*/
        int SPI_MOSI;
        /* The clock is signaled on this pin */
        int SPI_CLK;
        /* This one is driven LOW for chip selection */
        int SPI_CS;
        /* The maximum number of devices we use */
        int maxDevices;

    public:
        /* 
         * Create a new controler 
         * Params :
         * dataPin		pin on the Arduino where data gets shifted out
         * clockPin		pin for the clock
         * csPin		pin for selecting the device 
         * numDevices	maximum number of devices that can be controled
         */
        LedControl(const int dataPin, const int clkPin, const int csPin, int numDevices=1);

        /*
         * Gets the number of devices attached to this LedControl.
         * Returns :
         * int	the number of devices on this LedControl
         */
        int getDeviceCount();

        /* 
         * Set the shutdown (power saving) mode for the device
         * Params :
         * addr	The address of the display to control
         * status	If true the device goes into power-down mode. Set to false
         *		for normal operation.
         */
        void shutdown(const int addr, const bool status);

        /* 
         * Set the number of digits (or rows) to be displayed.
         * See datasheet for sideeffects of the scanlimit on the brightness
         * of the display.
         * Params :
         * addr	address of the display to control
         * limit	number of digits to be displayed (1..8)
         */
        void setScanLimit(const int addr, const int limit);

        /* 
         * Set the brightness of the display.
         * Params:
         * addr		the address of the display to control
         * intensity	the brightness of the display. (0..15)
         */
        void setIntensity(const int addr, const int intensity);

        /* 
         * Switch all Leds on the display off. 
         * Params:
         * addr	address of the display to control
         */
        void clearDisplay(const int addr);

        /* 
         * Set the status of a single Led.
         * Params :
         * addr	address of the display 
         * row	the row of the Led (0..7)
         * col	the column of the Led (0..7)
         * state	If true the led is switched on, 
         *		if false it is switched off
         */
        void setLed(const int addr, const int row, const int col, const bool state);

        /* 
         * Set all 8 Led's in a row to a new state
         * Params:
         * addr	address of the display
         * row	row which is to be set (0..7)
         * value	each bit set to 1 will light up the
         *		corresponding Led.
         */
        void setRow(const int addr, const int row, const byte value);

        /* 
         * Set all 8 Led's in a column to a new state
         * Params:
         * addr	address of the display
         * col	column which is to be set (0..7)
         * value	each bit set to 1 will light up the
         *		corresponding Led.
         */
        void setColumn(const int addr, const int col, const byte value);

        /*
         * Write a character to a display
         * Params:
         * addr address of the display
         * character the caracter to be displayed
         */
        void setCharacter(const int addr, char character);

        /*Clean up on Ctrl+C or SIGTERM*/
        void cleanUp();
};


#endif	//LedControl.h
